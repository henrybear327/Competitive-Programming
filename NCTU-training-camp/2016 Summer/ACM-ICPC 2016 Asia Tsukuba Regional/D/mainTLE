#include <bits/stdc++.h>

using namespace std;

int n, inp[333];
int dp[333][333];

#define DEBUG 0

int solve(int l, int r) //[l, r]
{
#if DEBUG == 1
    printf("%d %d\n", l, r);
#endif
    if( !(0 <= l) || !(r < n) || l > r)
	return 0;
    if(dp[l][r] != -1) {
	return dp[l][r];
    }

    if(l == r)
	return 0;
    if(r - l == 1) {
	if(abs(inp[r] - inp[l]) <= 1)
	    return 1;
	else
	    return 0;
    }	    

    int mx = 0;
    for(int i = l + 1; i <= r; i++) {
	if(abs(inp[i] - inp[i - 1]) <= 1) {
	    // case1
	    int max1 = solve(l, i - 2) + solve(i + 1, r);
	    
	    // case2
	    int max2 = -1;
	    /*
	    for(int j = 1; i + j <= r && i - 1 - j >= 0; j++) {
		if(abs(inp[i + j] - inp[i - 1 - j]) <= 1) {
#if DEBUG == 1
		    printf("%d %d %d %d\n", l, i - 1 - j, i + j, r);
#endif
		    //max2 = solve(l, i - 3) + j + solve(i + 2, r);
		    max2 = max(max2, solve(l, i - 1 - j) + j  + solve(i + j, r));
		}
	    }
	    */

	    //case3
	    int max3 = -1;
	    for(int j = l; j <= r; j++) {
		for(int k = j + 1; k <= r; k++) {
		    if(abs(inp[k] - inp[j]) <= 1 && solve(j + 1, k - 1) * 2 == k - j - 1)
			max3 = max(max3, solve(l, j - 1) + 1 + solve(j + 1, k - 1) + solve(k + 1, r));
		}
	    }

#if DEBUG == 1
	    printf("mx1 %d mx2 %d\n", max1, max2);
#endif

	    mx = max(mx, max(max1, max2) + 1);
	    mx = max(mx, max3);
	}
    }
    
#if DEBUG == 1
    printf("%d %d mx %d\n", l, r, mx);
#endif
    return dp[l][r] = mx;
}

int main()
{
    while(scanf("%d", &n) == 1 && n) {
	memset(dp, -1, sizeof(dp));

	for(int i = 0; i < n; i++)
	    scanf("%d", &inp[i]);
	
	printf("%d\n", solve(0, n - 1) * 2);
    }

    return 0;
}
