#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

#define NOTHING 0
#define BLACK 1
#define WHITE 2
#define USED_B 3
#define USED_W 4

int map[19][19];

void print_map()
{
    for (int i = 0; i < 19; i++) {
        for (int j = 0; j < 19; j++) {
            printf("%d", map[i][j]);
        }
        printf("\n");
    }
    printf("\n");
}

int direction_array[8][2] = {
    {-1, -1}, {0, -1}, {1, -1}, {-1, 0}, {1, 0}, {-1, 1}, {0, 1}, {1, 1}
};

int row, column;

int color, flag = 0;

int start_x, start_y, end_x, end_y;

void check_over_five(int x, int y, int direction, int count)
{
    // printf("%d %d %d %d\n", x, y, direction, count);
    // print_map();
    if (direction == -1) {
        // first time in function, not recursion
        for (int i = 0; i < 8; i++) {
            if (0 <= x + direction_array[i][0] && x + direction_array[i][0] < 19 &&
                0 <= y + direction_array[i][1] && y + direction_array[i][1] < 19) {
                // in map
                if (map[x + direction_array[i][0]][y + direction_array[i][1]] ==
                    color ||
                    map[x + direction_array[i][0]][y + direction_array[i][1]] ==
                    (color == BLACK ? USED_B : USED_W)) {
                    // check black or white
                    if (color == BLACK)
                        map[x][y] = USED_B;
                    else if (color == WHITE)
                        map[x][y] = USED_W;
                    check_over_five(x + direction_array[i][0], y + direction_array[i][1],
                                    i, count + 1);
                    start_x = x;
                    start_y = y;

                    // print in the second line the horizontal line number and the
                    // vertical line number of the left-most stone among the five
                    // consecutive stones. (Select the upper-most stone if the five
                    // consecutive stones are located vertically.)
                    if (flag == 1) {
                        if (start_y == end_y)
                            if (start_x > end_x)
                                printf("%d %d\n", end_x + 1, end_y + 1);
                            else
                                printf("%d %d\n", start_x + 1, start_y + 1);
                        else if (start_y < end_y)
                            printf("%d %d\n", start_x + 1, start_y + 1);
                        else
                            printf("%d %d\n", end_x + 1, end_y + 1);
                        break;
                    }
                }
            }
        }
    } else {
        while (0 <= x && x < 19 && 0 <= y && y < 19) {
            if (color == BLACK)
                map[x][y] = USED_B;
            else if (color == WHITE)
                map[x][y] = USED_W;
            // print_map();
            // printf(
            //"%d %d %d\n",
            // map[x + direction_array[direction][0]][y +
            //        direction_array[direction][1]],
            // color, count);
            if (map[x + direction_array[direction][0]]
                [y + direction_array[direction][1]] == color ||
                map[x +
                    direction_array[direction][0]][y +
                                                   direction_array[direction][1]] ==
                (color == BLACK ? USED_B : USED_W)) {
                x = x + direction_array[direction][0];
                y = y + direction_array[direction][1];
                count++;
            } else {
                break;
            }
        }
        // printf("here2: %d\n", count);

        if (count == 5) {
            printf("%d\n", color);
            end_x = x;
            end_y = y;
            flag = 1;
        } else {
            return;
        }
        /*
        if (0 <= x + direction_array[direction][0] &&
            x + direction_array[direction][0] < 19 &&
            0 <= y + direction_array[direction][1] &&
            y + direction_array[direction][1] < 19) {
            if (map[x + direction_array[direction][0]]
                [y + direction_array[direction][1]] == color) {
                map[x + direction_array[direction][0]][y +
                                                       direction_array[direction][1]]
        =
                                                               USED;
                check_over_five(x + direction_array[direction][0],
                                y + direction_array[direction][1], direction,
        count++);
            } else {
                if (count == 5) {
                    if (color == BLACK)
                        printf("1\n");
                    else if (color == WHITE)
                        printf("2\n");

                    flag = 1;
                }
            }
        }
        */
    }
}

int main()
{
    int test_cases;
    while (scanf("%d", &test_cases) == 1) {
        while (test_cases--) {
            for (int i = 0; i < 19; i++) {
                for (int j = 0; j < 19; j++) {
                    scanf("%d", &map[i][j]);
                }
            }

            for (int i = 0; i < 19 && flag != 1; i++) {
                for (int j = 0; j < 19 && flag != 1; j++) {
                    if (map[i][j] == BLACK || map[i][j] == WHITE) {
                        color = map[i][j];
                        check_over_five(i, j, -1, 1);
                    }
                }
            }

            if (flag == 0)
                printf("0\n");
            else
                flag = 0;
        }
    }
    return 0;
}

